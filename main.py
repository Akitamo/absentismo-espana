"""
Sistema de Extracci√≥n de Datos INE - Absentismo Espa√±a v2
Punto de entrada principal para el agente extractor
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime

# A√±adir el directorio al path
sys.path.append(str(Path(__file__).parent))

from agent_extractor import INEExtractor

def main():
    parser = argparse.ArgumentParser(
        description='Agente Extractor INE - Sistema de descarga de datos de absentismo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python main.py --check              # Verificar actualizaciones
  python main.py --download-all       # Descargar todas las tablas
  python main.py --download 6042      # Descargar tabla espec√≠fica
  python main.py --info 6042          # Ver informaci√≥n de una tabla
        """
    )
    
    parser.add_argument('--check', action='store_true',
                      help='Verificar actualizaciones en las tablas del INE')
    
    parser.add_argument('--download-all', action='store_true',
                      help='Descargar todas las tablas configuradas')
    
    parser.add_argument('--download', type=str, metavar='CODIGO',
                      help='Descargar una tabla espec√≠fica por su c√≥digo')
    
    parser.add_argument('--info', type=str, metavar='CODIGO',
                      help='Obtener informaci√≥n de una tabla espec√≠fica')
    
    parser.add_argument('--quiet', action='store_true',
                      help='Modo silencioso, menos output')
    
    args = parser.parse_args()
    
    # Si no se proporciona ning√∫n argumento, mostrar ayuda
    if not any(vars(args).values()):
        parser.print_help()
        return
    
    # Inicializar el extractor
    print(f"\n{'='*60}")
    print(f"SISTEMA DE EXTRACCI√ìN INE - ABSENTISMO ESPA√ëA v2")
    print(f"{'='*60}")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    extractor = INEExtractor()
    
    # Verificar actualizaciones
    if args.check:
        print("Verificando actualizaciones en el INE...")
        print("-" * 50)
        resultado = extractor.check_for_updates()
        
        print(f"\nTablas verificadas: {resultado['tablas_verificadas']}")
        
        if resultado['actualizaciones_detectadas']:
            print(f"\n¬°Se detectaron {len(resultado['actualizaciones_detectadas'])} actualizaciones!")
            for tabla in resultado['actualizaciones_detectadas']:
                print(f"  ‚Ä¢ {tabla['codigo']}: {tabla['nombre'][:50]}")
                print(f"    √öltimo periodo: {tabla.get('ultimo_periodo', 'N/A')}")
        else:
            print("No se detectaron actualizaciones nuevas.")
        
        if resultado['errores']:
            print(f"\n‚ö† Se encontraron {len(resultado['errores'])} errores:")
            for error in resultado['errores'][:5]:  # Mostrar solo los primeros 5
                print(f"  ‚Ä¢ {error['codigo']}: {error['error']}")
    
    # Descargar todas las tablas
    elif args.download_all:
        print("Iniciando descarga de todas las tablas...")
        resultado = extractor.download_all(verbose=not args.quiet)
        
        if not args.quiet:
            print(f"\n‚úÖ Descarga completada:")
            print(f"  ‚Ä¢ Exitosas: {len(resultado['exitosas'])}/{resultado['total_tablas']}")
            print(f"  ‚Ä¢ Tiempo: {resultado['tiempo_total']:.1f} segundos")
    
    # Descargar tabla espec√≠fica
    elif args.download:
        codigo = args.download
        print(f"Descargando tabla {codigo}...")
        resultado = extractor.download_table(codigo)
        
        if resultado['exitoso']:
            print(f"‚úÖ Tabla {codigo} descargada exitosamente")
            print(f"  ‚Ä¢ Tama√±o: {resultado['tama√±o_kb']:.1f} KB")
            print(f"  ‚Ä¢ Encoding: {resultado['encoding_usado']}")
        else:
            print(f"‚ùå Error descargando tabla {codigo}: {resultado['error']}")
    
    # Informaci√≥n de tabla
    elif args.info:
        codigo = args.info
        print(f"Obteniendo informaci√≥n de tabla {codigo}...")
        info = extractor.get_table_info(codigo)
        
        if info:
            print(f"\nüìä Informaci√≥n de tabla {codigo}:")
            print(f"  ‚Ä¢ Nombre: {info['nombre']}")
            print(f"  ‚Ä¢ Categor√≠a: {info['categoria']}")
            print(f"  ‚Ä¢ Datos disponibles: {info['datos_disponibles']}")
            
            if info['periodo_info']['ultimo_periodo']:
                print(f"  ‚Ä¢ √öltimo periodo: {info['periodo_info']['ultimo_periodo']}")
                print(f"  ‚Ä¢ Total periodos: {info['periodo_info']['total_periodos']}")
            
            print(f"\nURLs:")
            print(f"  ‚Ä¢ CSV: {info['url_csv']}")
            print(f"  ‚Ä¢ JSON: {info['url_json']}")
        else:
            print(f"‚ùå No se encontr√≥ informaci√≥n para la tabla {codigo}")
    
    print(f"\n{'='*60}\n")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö† Operaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)