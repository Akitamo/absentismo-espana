"""
Ejecutor Simplificado - An√°lisis Robusto de Factibilidad
Ejecuta el an√°lisis paso a paso con manejo robusto de errores
"""

import subprocess
import sys
import os
from pathlib import Path
from datetime import datetime

def ejecutar_paso(script_name, descripcion):
    """Ejecuta un paso individual del an√°lisis"""
    print(f"\n{'='*60}")
    print(f"üöÄ EJECUTANDO: {descripcion}")
    print(f"{'='*60}")
    
    try:
        # Ejecutar script
        resultado = subprocess.run([
            sys.executable, script_name
        ], cwd=Path(__file__).parent)
        
        if resultado.returncode == 0:
            print(f"‚úÖ {descripcion} - COMPLETADO")
            return True
        else:
            print(f"‚ùå {descripcion} - ERROR (c√≥digo: {resultado.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå {descripcion} - EXCEPCI√ìN: {e}")
        return False

def verificar_archivos_csv():
    """Verifica que existan archivos CSV"""
    data_dir = Path("../../data/raw/csv")
    archivos_csv = list(data_dir.glob("*.csv"))
    
    if len(archivos_csv) < 10:
        print(f"‚ùå Insuficientes archivos CSV: {len(archivos_csv)} encontrados")
        return False
    
    print(f"‚úÖ {len(archivos_csv)} archivos CSV encontrados")
    return True

def verificar_dependencias():
    """Verifica que est√©n las dependencias necesarias"""
    try:
        import pandas
        import chardet
        print("‚úÖ Dependencias verificadas")
        return True
    except ImportError as e:
        print(f"‚ùå Falta dependencia: {e}")
        print("üí° Ejecute: python instalar_chardet.py")
        return False

def main():
    """Funci√≥n principal simplificada"""
    print("üéØ AN√ÅLISIS ROBUSTO DE FACTIBILIDAD - EJECUTOR SIMPLIFICADO")
    print("="*80)
    print("Procesar√° archivos CSV problem√°ticos del INE para an√°lisis de absentismo")
    print("="*80)
    
    # Verificaciones previas
    if not verificar_dependencias():
        print("\nüí° Instalando dependencias...")
        if ejecutar_paso("instalar_chardet.py", "Instalaci√≥n de Dependencias"):
            print("‚úÖ Dependencias instaladas, reinicie el script")
        return False
    
    if not verificar_archivos_csv():
        print("‚ùå Prerequisitos no cumplidos")
        return False
    
    # Pipeline de an√°lisis
    pasos = [
        ("analisis_estructura_robusto.py", "An√°lisis Robusto de Estructura CSV"),
        ("detector_absentismo.py", "Detecci√≥n de Datos de Absentismo"),
        ("generar_informe_factibilidad_corregido.py", "Generaci√≥n de Informe HTML")
    ]
    
    # Ejecutar cada paso
    exitos = 0
    inicio_total = datetime.now()
    
    for script, descripcion in pasos:
        if ejecutar_paso(script, descripcion):
            exitos += 1
        else:
            print(f"\n‚ùå PROCESO INTERRUMPIDO en: {descripcion}")
            break
    
    # Verificar archivos generados
    archivos_esperados = [
        "../../informes/analisis_estructura_robusto.json",
        "../../informes/deteccion_absentismo_detallada.json", 
        "../../informes/factibilidad_absentismo.html"
    ]
    
    archivos_generados = 0
    for archivo in archivos_esperados:
        if Path(archivo).exists():
            tama√±o_kb = Path(archivo).stat().st_size / 1024
            print(f"‚úÖ Generado: {Path(archivo).name} ({tama√±o_kb:.1f} KB)")
            archivos_generados += 1
        else:
            print(f"‚ùå No encontrado: {Path(archivo).name}")
    
    # Resumen final
    tiempo_total = (datetime.now() - inicio_total).total_seconds() / 60
    
    print("\n" + "="*80)
    print("üèÅ AN√ÅLISIS ROBUSTO COMPLETADO")
    print("="*80)
    
    if exitos == len(pasos):
        print("‚úÖ ESTADO: COMPLETADO EXITOSAMENTE")
        print(f"üìä Pasos completados: {exitos}/{len(pasos)}")
        print(f"üìÅ Archivos generados: {archivos_generados}/{len(archivos_esperados)}")
        print(f"‚è±Ô∏è  Tiempo total: {tiempo_total:.1f} minutos")
        
        if archivos_generados == len(archivos_esperados):
            print(f"\nüéâ ¬°AN√ÅLISIS COMPLETADO EXITOSAMENTE!")
            print(f"üìã PR√ìXIMOS PASOS:")
            print(f"   1. Abrir: informes/factibilidad_absentismo.html")
            print(f"   2. Revisar: informes/analisis_estructura_robusto.json")
            print(f"   3. Validar: informes/deteccion_absentismo_detallada.json")
            return True
        else:
            print(f"‚ö†Ô∏è Algunos archivos no se generaron correctamente")
    else:
        print("‚ùå ESTADO: COMPLETADO CON ERRORES")
        print(f"üìä Pasos completados: {exitos}/{len(pasos)}")
        print(f"üí° Revise los errores mostrados arriba")
    
    return False

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
        sys.exit(1)
